# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      # 1) Klon hlavního repa BEZ submodulů a BEZ implicitního GITHUB_TOKEN
    - name: Checkout without submodules
      uses: actions/checkout@v4
      with:
        submodules: false
        persist-credentials: false

    # 2) Přesměrování všech https://github.com/ → https://x-access-token:…@github.com/
    - name: Configure HTTP auth for GitHub
      run: |
        git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

    # 3) Přepíšeme SSH‐URL na HTTP v .gitmodules
    - name: Rewrite submodule URLs (ssh → https)
      run: |
        sed -i 's#git@github.com:\(.*\)\.git#https://github.com/\1.git#g' .gitmodules
        git submodule sync --recursive

    # 4) Naklonujeme submoduly přes HTTP + token
    - name: Init & update submodules
      run: |
        git submodule update --init --recursive


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake src/ -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

